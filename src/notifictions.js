import React, {useState, createContext} from 'react';
import {useEffect} from 'react';
import messaging from '@react-native-firebase/messaging';
import PushNotification from 'react-native-push-notification'
import {setUncheckedNotificationsCount} from './ducks/main';
import PushNotificationIOS from '@react-native-community/push-notification-ios';
import {Platform} from 'react-native';
var BadgeAndroid = require('react-native-android-badge');

export const registerForegroundNotifications = onNotification => {
    return messaging().onMessage(async remoteMessage => {
      console.log('Foreground notification: ', remoteMessage.data);
      const { body, title } = remoteMessage.data;
      showNotification(body, title);
      if (onNotification) {
        return onNotification(remoteMessage.data);
      }
    });
};

export const NotificationsContext = createContext();
export const ForegroundNotificationsManager = ({children}) => {
    const [notification, setNotification] = useState(null);

    useEffect(() => {

        return registerForegroundNotifications(newNotification => {
            setNotification(newNotification);
        });

    }, []);

    const clearNotification = async () => {
        await removeNotificationData();
    };

    return (
        <NotificationsContext.Provider value={{notification, clearNotification}}>
            {children}
        </NotificationsContext.Provider>
    );
};

export const showNotification = (title, body) => {
    return PushNotification.localNotification({
        /* Android Only Properties */
        id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        //ticker: 'My Notification Ticker', // (optional)
        autoCancel: true, // (optional) default: true
        largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
        smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
        //bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
        //subText: 'This is a subText', // (optional) default: none
        color: '#999', // (optional) default: system default
        vibrate: true, // (optional) default: true
        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        tag: 'some_tag', // (optional) add tag to message
        group: 'group', // (optional) add group to message
        ongoing: false, // (optional) set whether this is an "ongoing" notification
        priority: 'high', // (optional) set notification priority, default: high
        visibility: 'private', // (optional) set notification visibility, default: private
        importance: 'high', // (optional) set notification importance, default: high

        /* iOS only properties */
        alertAction: 'view', // (optional) default: view
        category: null, // (optional) default: null
        userInfo: null, // (optional) default: null (object containing additional notification data)

        /* iOS and Android properties */
        title: title,
        message: body,
        playSound: false, // (optional) default: true
        soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        //number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        //repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
        //actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
    });
};

/**
 * Set notifications badge
 */
export function setBadge (count)
{
    PushNotification.setApplicationIconBadgeNumber(+count);
    if (BadgeAndroid)
    {
        BadgeAndroid.setBadge(+count);
    }

    setUncheckedNotificationsCount(+count);

    if (count === 0)
    {
        PushNotification.cancelAllLocalNotifications();
        if (Platform.OS === 'ios')
        {
            PushNotificationIOS.removeAllDeliveredNotifications();
            PushNotificationIOS.setApplicationIconBadgeNumber(0);
        }
    }
}
